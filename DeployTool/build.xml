<?xml version="1.0"?>
<project name="CreateDXP" default="SHOWMESSAGE" basedir=".">

	<property name="product-config" location="${basedir}/product-config" description="公共配置目录" />
	<property name="installsoft" location="${product-config}/installsoft" description="二进制安装文件" />
	<property name="replaceconfig" location="${product-config}/replaceconfig" description="用于替换的配置文件目录" />

	<property name="creatProductFolder" location="${basedir}" description="部署环境的目录" />
	<property file="${basedir}/config.properties" />

	<!--引用jar包-->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${product-config}/lib/ant-contrib-1.0b3.jar" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${product-config}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<taskdef name="SecurityTask" classname="com.apusic.adxp.util.security.anttask.SecurityTask" classpath="${product-config}/lib/apusic-ant-help.jar" />
	<property name="mysql_driver_path" location="${product-config}/lib/mysql-connector-java-5.1.20-bin.jar" />

	<target name="SHOWMESSAGE">
		<echo message="环境构建工具" />
		<echo message="维护人：maobuji" />
		<echo message="部署工具的配置信息在config.properties文件中，启用工具前，请提前做好配置" />
		<echo message="需要手工拷贝相关二进制包到product-config/installsoft目录中" />

		<echo message="可用命令如下：" />
		<echo message="ant reall       :清理现有环境，并重新生成全新环境" />
		<echo message="请使用ant -p 命令查看所有可用任务" />
	</target>



	<target name="getprozip" description="研发环境自动下载产品包">
		<delete dir="${productfolder}" />
		<mkdir dir="${productfolder}" />
		<get src="http://build.apusic.net/view/ADXP/job/ADXP-daily/lastSuccessfulBuild/artifact/*zip*/archive.zip" dest="${productfolder}/archive.zip" usetimestamp="true" />
		<unzip src="${productfolder}/archive.zip" dest="${productfolder}/" />
		<copy todir="${productfolder}/">
			<fileset dir="${productfolder}/archive/adxp/adxp-build/output/product">
			</fileset>
		</copy>
		<delete dir="${productfolder}/archive" />
		<delete file="${productfolder}/archive.zip" />
	</target>

	<target name="inittestdb">
		<echo message="Initializing test database... If error occurs,let it be." />
		<sql autoCommit="true" classpath="${mysql_driver_path}" driver="${TEST.DB.DRIVERCLASS}" url="jdbc:mysql://${TEST.DB.IP}:${TEST.DB.PORT}/test" userid="${TEST.DB.USERNAME}" password="${TEST.DB.PASSWORD}" src="${product-config}/testdbscript/mysql/CREATE_DB.sql" encoding="UTF-8" onerror="continue" />
	</target>
	<target name="readxpdb">
		<echo message="Initializing adxp database... If error occurs,let it be." />
		<sql autoCommit="true" classpath="${mysql_driver_path}" driver="${TEST.DB.DRIVERCLASS}" url="jdbc:mysql://${TEST.DB.IP}:${TEST.DB.PORT}/test" userid="${TEST.DB.USERNAME}" password="${TEST.DB.PASSWORD}" src="${product-config}/testdbscript/mysql/RE_CREATE_ADXP_DB.sql" encoding="UTF-8" onerror="continue" />
	</target>

	<target name="clsdblog">
		<echo message="Initializing adxp database... If error occurs,let it be." />
		<sql autoCommit="true" classpath="${mysql_driver_path}" driver="${TEST.DB.DRIVERCLASS}" url="jdbc:mysql://${TEST.DB.IP}:${TEST.DB.PORT}/test" userid="${TEST.DB.USERNAME}" password="${TEST.DB.PASSWORD}" src="${product-config}/testdbscript/mysql/CLEAR_ADXP_DB_LOG.sql" encoding="UTF-8" onerror="continue" />
	</target>

	<target name="remysql64db" description="重新生成一个mysql64位DB">
		<delete dir="${creatProductFolder}/DataBase" />
		<unzip dest="${creatProductFolder}">
			<fileset dir="${productfolder}">
				<include name="**/ADXP-DB-win64*.zip" />
			</fileset>
		</unzip>
	</target>

	<target name="remysql32db" description="重新生成一个mysql64位DB">
		<delete dir="${creatProductFolder}/DataBase" />
		<unzip dest="${creatProductFolder}">
			<fileset dir="${productfolder}">
				<include name="**/ADXP-DB-win32*.zip" />
			</fileset>
		</unzip>
	</target>

	<!--清理掉现有环境中的多余的产品文件-->
	<target name="clearADXP">
		<delete includeemptydirs="true" verbose="false" failonerror="false">
			<fileset dir="${basedir}">
				<include name="ADXP*/**" />
			</fileset>
		</delete>
	</target>

	<!--清理掉现有环境中的多余的产品文件-->
	<target name="clearAgent">
		<delete includeemptydirs="true" verbose="false" failonerror="false">
			<fileset dir="${basedir}">
				<include name="ADXP-Agent*/**" />
			</fileset>
		</delete>
	</target>

	<target name="reall" depends="clearADXP,unzipall,getall" description="清理并生成" />
	<target name="updateall" depends="bakall,reall,replaceall" description="升级现有产品" />
	<target name="reagent" depends="clearAgent,unZip-ADXP-Agent,security_tras,getADXP-Agent" description="清理并生成节点" />


	<!--解压ADXP-D*.zip-->
	<!--*******************************************************解压产品包******************************************************-->
	<target name="unzipall" depends="unZip-ADXP,unZip-ADXP-Agent" />

	<target name="unZip-ADXP">
		<delete dir="${productfolder}/ADXP" />
		<!--如果Agent数量为0,则不需要解压-->
		<if>
			<equals arg1="${ADXP_MANAGER_NUMBER}" arg2="0" />
			<else>
				<unzip dest="${productfolder}">
					<fileset dir="${productfolder}">
						<include name="**/ADXP*.zip" />
						<exclude name="**/ADXP-DeployTool*.zip" />
						<exclude name="**/ADXP-DB*.zip" />
						<exclude name="**/ADXP-Agent*.zip" />
					</fileset>
				</unzip>
			</else>
		</if>
	</target>

	<target name="unZip-ADXP-Agent" description="解压ADXP-AGENT-D*.zip">
		<delete dir="${productfolder}/ADXP-Agent" />

		<!--如果Agent数量为0,则不需要解压-->
		<if>
			<equals arg1="${ADXP_AGENT_NUMBER}" arg2="0" />
			<else>

				<if>
					<equals arg1="${DEPLOY_PLATFORM}" arg2="win" />
					<then>
						<unzip dest="${productfolder}">
							<fileset dir="${productfolder}">
								<include name="**/ADXP-Agent-win*.zip" />
							</fileset>
						</unzip>
						<copy todir="${productfolder}/ADXP-Agent">
							<fileset dir="${productfolder}/ADXP-Agent-win">
							</fileset>
						</copy>
						<delete dir="${productfolder}/ADXP-Agent-win" />
					</then>
					<elseif>
						<equals arg1="${DEPLOY_PLATFORM}" arg2="linux" />
						<then>
							<unzip dest="${productfolder}">
								<fileset dir="${productfolder}">
									<include name="**/ADXP-Agent-linux*.zip" />
								</fileset>
							</unzip>
							<copy todir="${productfolder}/ADXP-Agent">
								<fileset dir="${productfolder}/ADXP-Agent-linux">
								</fileset>
							</copy>
							<delete dir="${productfolder}/ADXP-Agent-linux" />
						</then>
					</elseif>
					<else>
						<echo message="操作系统类型选择不正确，请填写win或linux" />
					</else>
				</if>
			</else>
		</if>
	</target>




	<!--*******************************************************备份产品配置******************************************************-->
	<target name="bakall" depends="bak-ADXP-Agent" />

	<target name="bak-ADXP-Agent" description="备份ADXP-AGENT配置文件">
		<for param="i" begin="${ADXP_AGENT_NUMBER}" step="-1" end="1">
			<sequential>
				<echo>this is the bak-conf for ADXP-Agent@{i}</echo>
				<delete dir="${product-backup}/ADXP-Agent@{i}" />
				<mkdir dir="${product-backup}/ADXP-Agent@{i}" />
				<copy file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" tofile="${product-backup}/ADXP-agent@{i}/adxp-agent.properties" />
				<copy todir="${product-backup}/ADXP-Agent@{i}/db">
					<fileset dir="${creatProductFolder}/ADXP-Agent@{i}/db" />
				</copy>

				<!--还需要备份***ADXP-Agent1\export_data\*   ADXP-Agent1\AETL\config\server-config.xml   ETL的资源库******-->

			</sequential>
		</for>
	</target>

	<!--*******************************************************生成产品包******************************************************-->

	<target name="getall" depends="security_tras,getADXP,getADXP-Agent" />

	<target name="security_tras">
		<if>
			<equals arg1="${DB.INFO.SECURITY}" arg2="true" />
			<then>
				<SecurityTask param="DB.URL" />
				<SecurityTask param="DB.USERNAME" />
				<SecurityTask param="DB.PASSWORD" />
			</then>
		</if>
	</target>


	<target name="getADXP" description="新生成ADXP管理平台">
		<if>
			<equals arg1="${ADXP_MANAGER_NUMBER}" arg2="0" />
			<else>
				<for param="i" begin="${ADXP_MANAGER_NUMBER}" step="-1" end="1">
					<sequential>
						<echo>this is the deployment for ADXP@{i}</echo>
						<delete dir="${creatProductFolder}/ADXP@{i}" />
						<mkdir dir="${creatProductFolder}/ADXP@{i}" />
						<copy todir="${creatProductFolder}/ADXP@{i}">
							<fileset dir="${productfolder}/ADXP" />
						</copy>
						<echo>replace name for ADXP-dos</echo>

						<!--添加monitor的license-->
						<copy file="${product-config}/license/adxp-monitor-license.xml" tofile="${creatProductFolder}/ADXP@{i}/WebServer/webapps/monitor/license.xml" overwrite="true" />

						<if>
							<equals arg1="${DEPLOY_PLATFORM}" arg2="win" />
							<then>
								<replace file="${creatProductFolder}/ADXP@{i}/WebServer/bin/catalina.bat" token="TITLE=Tomcat" value="TITLE=ADXP@{i}" encoding="UTF-8" />
							</then>
						</if>
						<replace file="${creatProductFolder}/ADXP@{i}/WebServer/conf/server.xml" token="8000" value="${MONITOR_PORT}" encoding="UTF-8" />
						<!-- 配置数据库连接-->

						<replaceregexp byline="true">
							<regexp pattern="hibernate.dialect=.*" />
							<substitution expression="hibernate.dialect=${DB.HIBERNATE.DIALECT}" />
							<fileset file="${creatProductFolder}/ADXP@{i}/WebServer/webapps/monitor/WEB-INF/adxp-config.properties" />
						</replaceregexp>

						<replaceregexp byline="true">
							<regexp pattern="db.driverClass=.*" />
							<substitution expression="db.driverClass=${DB.DRIVERCLASS}" />
							<fileset file="${creatProductFolder}/ADXP@{i}/WebServer/webapps/monitor/WEB-INF/adxp-config.properties" />
						</replaceregexp>

						<replaceregexp byline="true">
							<regexp pattern="db.url=.*" />
							<substitution expression="db.url=${DB.URL}" />
							<fileset file="${creatProductFolder}/ADXP@{i}/WebServer/webapps/monitor/WEB-INF/adxp-config.properties" />
						</replaceregexp>

						<replaceregexp byline="true">
							<regexp pattern="db.userName=.*" />
							<substitution expression="db.userName=${DB.USERNAME}" />
							<fileset file="${creatProductFolder}/ADXP@{i}/WebServer/webapps/monitor/WEB-INF/adxp-config.properties" />
						</replaceregexp>

						<replaceregexp byline="true">
							<regexp pattern="db.password=.*" />
							<substitution expression="db.password=${DB.PASSWORD}" />
							<fileset file="${creatProductFolder}/ADXP@{i}/WebServer/webapps/monitor/WEB-INF/adxp-config.properties" />
						</replaceregexp>

					</sequential>
				</for>
				<delete dir="${creatProductFolder}/ADXP" />
			</else>
		</if>
	</target>



	<target name="agentsp" description="将product-config/agentsp下的jar包放入各agent节点中">
		<if>
			<equals arg1="${ADXP_AGENT_NUMBER}" arg2="0" />
			<else>
				<for param="i" begin="${ADXP_AGENT_NUMBER}" step="-1" end="1">
					<sequential>
						<copy todir="${creatProductFolder}/ADXP-Agent@{i}/sp">
							<fileset dir="${product-config}/agentsp" />
						</copy>
						
						<!--降低windows下kafka和zk的内存-->
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/bin/windows/kafka-server-start.bat" token="-Xmx1G -Xms1G" value="-Xmx512M -Xms512M" encoding="UTF-8" />
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/bin/windows/zookeeper-server-start.bat" token="-Xmx512M -Xms512M" value="-Xmx256M -Xms256M" encoding="UTF-8" />
					</sequential>
				</for>
			</else>
		</if>
	</target>

	<target name="getADXP-Agent" description="新生成ADXP-Agent节点">
		<if>
			<equals arg1="${ADXP_AGENT_NUMBER}" arg2="0" />
			<else>
				<for param="i" begin="${ADXP_AGENT_NUMBER}" step="-1" end="1">
					<sequential>
						<echo>this is deployment for ADXP-Agent@{i}</echo>
						<delete dir="${creatProductFolder}/ADXP-Agent@{i}" />
						<mkdir dir="${creatProductFolder}/ADXP-Agent@{i}" />
						<copy todir="${creatProductFolder}/ADXP-Agent@{i}">
							<fileset dir="${productfolder}/ADXP-Agent" />
						</copy>

						<!--添加Agent和ETL的license-->
						<copy file="${product-config}/license/adxp-aetl-license.xml" tofile="${creatProductFolder}/ADXP-Agent@{i}/AETL/license.xml" overwrite="true" />
						<copy file="${product-config}/license/adxp-agent-license.xml" tofile="${creatProductFolder}/ADXP-Agent@{i}/license.xml" overwrite="true" />

						<!--修改agent windows debug端口-->
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/bin/startAgent.cmd" token="1360" value="${AGENT@{i}_WIN_DEBUG_PORT}" encoding="UTF-8" />

						<!--修改agent启动dos窗口标题-->
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/bin/setenv.cmd" token="ADXP-Agent" value="ADXP-Agent@{i}" encoding="UTF-8" />
						<!--修改Agent的h2默认配置-->
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/conf/quartz.properties" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/conf/logback.xml" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent-context.xml" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />

						<!--修改ETL启动dos窗口标题-->
						<if>
							<equals arg1="${DEPLOY_PLATFORM}" arg2="win" />
							<then>
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/startserver.bat" token="REM ** AETL home                                  **" value="title AETL@{i}" encoding="UTF-8" />
							</then>
						</if>


						<!--修改ETL启动端口-->
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/config/server-config.xml" token="8080" value="${AGENT@{i}_API_PORT}" encoding="UTF-8" />
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/conf/aetl-config.properties" token="8080" value="${AGENT@{i}_API_PORT}" encoding="UTF-8" />

						<if>
							<equals arg1="${AGENT@{i}_STORE_PATH}" arg2="" />
							<else>
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/config/repositories.xml" token="&gt;repo&lt;" value="&gt;${AGENT@{i}_STORE_PATH}/AETL/repo&lt;" encoding="UTF-8" />

								<if>
									<equals arg1="${AGENT@{i}_STORE_PATH_RECREATE}" arg2="true" />
									<then>
										<!--先清理-->
										<delete dir="${AGENT@{i}_STORE_PATH}" />
										<mkdir dir="${AGENT@{i}_STORE_PATH}" />
										<!--再创建-->
										<copy todir="${AGENT@{i}_STORE_PATH}">
											<fileset dir="${product-config}/storedir">
												<include name="**/*" />
											</fileset>
										</copy>
										<replace file="${AGENT@{i}_STORE_PATH}/AETL/repo/logdb.kdb" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />
									</then>
								</if>

							</else>
						</if>

						<!--修改ETL的h2数据库端口ADXP-Agent1\AETL\store\h2.bat-->
						<if>
							<equals arg1="${DEPLOY_PLATFORM}" arg2="win" />
							<then>
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/store/h2.bat" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />

								<if>
									<equals arg1="${AGENT@{i}_STORE_PATH}" arg2="" />
									<else>
										<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/store/h2.bat" token="-baseDir db" value="-baseDir ${AGENT@{i}_STORE_PATH}/AETL/store/db" encoding="UTF-8" />
									</else>
								</if>
							</then>
						</if>


						<if>
							<equals arg1="${AGENT@{i}_STORE_PATH}" arg2="" />
							<else>
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/store/h2.sh" token="-baseDir db" value="-baseDir ${AGENT@{i}_STORE_PATH}/AETL/store/db" encoding="UTF-8" />
							</else>
						</if>

						<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/store/h2.sh" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/AETL/repo/logdb.kdb" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />
						<replace file="${creatProductFolder}/ADXP-Agent@{i}/conf/aetl-config.properties" token="9000" value="${AGENT@{i}_H2_DB_PORT}" encoding="UTF-8" />

						<if>
							<equals arg1="${AGENT_AUTO_CONFIG}" arg2="true" />
							<then>
								<copy file="${product-config}/template/adxp-agent.properties" tofile="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" overwrite="true" />

								<!-- 配置agent配置文件-->

								<replaceregexp byline="true">
									<regexp pattern="agent.code=.*" />
									<substitution expression="agent.code=${AGENT@{i}_CODE}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.name=.*" />
									<substitution expression="agent.name=${AGENT@{i}_NAME}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true" encoding="UTF-8">
									<regexp pattern="agent.label=.*" />
									<substitution expression="agent.label=${AGENT@{i}_LABEL}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.ip=.*" />
									<substitution expression="agent.ip=${AGENT@{i}_IP}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.port=.*" />
									<substitution expression="agent.port=${AGENT@{i}_PORT}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.transferPort=.*" />
									<substitution expression="agent.transferPort=${AGENT@{i}_TRANSFERPORT}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.trans.security=.*" />
									<substitution expression="agent.trans.security=${AGENT@{i}_TRANS_SECURITY}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.trans.zip=.*" />
									<substitution expression="agent.trans.zip=${AGENT@{i}_TRANS_ZIP}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>


								<replaceregexp byline="true">
									<regexp pattern="agent.report.time=.*" />
									<substitution expression="agent.report.time=${AGENT@{i}.REPORT.TIME}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.report.restype=.*" />
									<substitution expression="agent.report.restype=${AGENT@{i}.REPORT.RESTYPE}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>


								<replaceregexp byline="true">
									<regexp pattern="agent.aetl.log.report=.*" />
									<substitution expression="agent.aetl.log.report=${AGENT@{i}_AETL_LOG_REPORT}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="agent.store.path=.*" />
									<substitution expression="agent.store.path=${AGENT@{i}_STORE_PATH}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>


								<replaceregexp byline="true">
									<regexp pattern="monitor.ip=.*" />
									<substitution expression="monitor.ip=${MONITOR_IP}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>


								<replaceregexp byline="true">
									<regexp pattern="monitor.port=.*" />
									<substitution expression="monitor.port=${MONITOR_PORT}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<replaceregexp byline="true">
									<regexp pattern="monitor.name=.*" />
									<substitution expression="monitor.name=${MONITOR_NAME}" />
									<fileset file="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" />
								</replaceregexp>

								<!--配置zk和kafka-->
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${kafka.broker.id}" value="@{i}" encoding="UTF-8" />
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/zookeeper.properties" token="${zookeeper_port}" value="${AGENT@{i}_ZOOKEEPER_PORT}" encoding="UTF-8" />

								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${kafka_ip}" value="${AGENT@{i}_IP}" encoding="UTF-8" />
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${kafka_port}" value="${AGENT@{i}_TRANSFERPORT}" encoding="UTF-8" />
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${zookeeper.connect}" value="${AGENT@{i}_LOCAL_IP}:${AGENT@{i}_ZOOKEEPER_PORT}" encoding="UTF-8" />
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${log.retention.hours}" value="${AGENT@{i}_FILE_TIMEOUT_HOUR}" encoding="UTF-8" />
								
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/bin/windows/kafka-server-start.bat" token="title DGP-Kafka" value="title ADXP-AGENT@{i}-Kafka" encoding="UTF-8" />
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/bin/windows/zookeeper-server-start.bat" token="title DGP-Zookeeper" value="title ADXP-AGENT@{i}-Zookeeper" encoding="UTF-8" />


								<!--配置zk和kafka的存储目录-->
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${datadir}" value="tmp" encoding="UTF-8" />
								<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/zookeeper.properties" token="${datadir}" value="tmp" encoding="UTF-8" />
								<!--暂时不考虑集中部署
								<if>
									<equals arg1="${AGENT@{i}_STORE_PATH}" arg2="" />
									<then>
										<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${datadir}" value="tmp" encoding="UTF-8" />
										<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/zookeeper.properties" token="${datadir}" value="tmp" encoding="UTF-8" />
									</then>
									<else>
										<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/server.properties" token="${datadir}" value="${AGENT@{i}_STORE_PATH}" encoding="UTF-8" />
										<replace file="${creatProductFolder}/ADXP-Agent@{i}/kafka/config/zookeeper.properties" token="${datadir}" value="${AGENT@{i}_STORE_PATH}" encoding="UTF-8" />
									</else>
								</if>
							   -->
							</then>
						</if>
					</sequential>
				</for>
			</else>
		</if>
	</target>


	<!--清理Agentlog-->
	<target name="clearagentlogs">
		<if>
			<equals arg1="${ADXP_AGENT_NUMBER}" arg2="0" />
			<else>
				<for param="i" begin="${ADXP_AGENT_NUMBER}" step="-1" end="1">
					<sequential>
						<echo>clear logs for ADXP-Agent@{i}</echo>
						<delete dir="${creatProductFolder}/ADXP-Agent@{i}/log" />
						<mkdir dir="${creatProductFolder}/ADXP-Agent@{i}/log" />

					</sequential>
				</for>
			</else>
		</if>
	</target>


	<!--*******************************************************替换还原产品包******************************************************-->
	<target name="replaceall" depends="replace-agent-conf" />

	<target name="replace-agent-conf" description="替换环境中的agent配置">
		<for param="i" begin="${ADXP_AGENT_NUMBER}" step="-1" end="1">
			<sequential>
				<echo>this is replace_conf for ADXP-Agent@{i}</echo>
				<copy file="${product-backup}/ADXP-Agent@{i}/adxp-agent.properties" tofile="${creatProductFolder}/ADXP-Agent@{i}/conf/adxp-agent.properties" overwrite="true" />

				<copy todir="${creatProductFolder}/ADXP-Agent@{i}/db" overwrite="true">
					<fileset dir="${product-backup}/ADXP-Agent@{i}/db" />
				</copy>
			</sequential>
		</for>
	</target>







	<!--*******************************************************其它任务******************************************************-->
	<target name="deploy1-new-ADXP" depends="unZip-ADXP,getADXP" description="已经有zip包，然后部署ADXP">
	</target>

	<target name="deploy2-new-ADXP" depends="getprozip,unZip-ADXP,getADXP" description="从构建环境中下载zip包，然后部署ADXP">
	</target>

	<target name="deploy1-new-ADXP-Agent" depends="unZip-ADXP-Agent,getADXP-Agent" description="已经有zip包，然后全新部署ADXP-Agent">
	</target>

	<target name="deploy2-new-ADXP-Agent" depends="getprozip,unZip-ADXP-Agent,getADXP-Agent" description="从构建环境中下载zip包，然后全新部署ADXP-Agent">
	</target>

	<target name="deploy1-replace-ADXP" depends="unZip-ADXP,getADXP" description="已经有zip包，更新ADXP">
	</target>

	<target name="deploy2-replace-ADXP" depends="getprozip,unZip-ADXP,getADXP" description="从构建环境中下载zip包，更新ADXP">
	</target>

	<target name="deploy3-replace-ADXP" depends="unZip-ADXP,getADXP" description="已经有zip包，然后更新ADXP">
	</target>

	<target name="deploy4-replace-ADXP" depends="getprozip,unZip-ADXP,getADXP" description="从构建环境中下载zip包，然后更新ADXP">
	</target>

	<target name="deploy1-replace-ADXP-Agent" depends="bak-ADXP-Agent,unZip-ADXP-Agent,getADXP-Agent,replace-agent-conf" description="已经有zip包，然后备份数据，更新ADXP-Agent">
	</target>

	<target name="deploy2-replace-ADXP-Agent" depends="bak-ADXP-Agent,getprozip,unZip-ADXP-Agent,getADXP-Agent,replace-agent-conf" description="从构建环境中下载zip包，然后备份数据，更新ADXP-Agent">
	</target>

	<target name="deploy3-replace-ADXP-Agent" depends="unZip-ADXP-Agent,getADXP-Agent,replace-agent-conf" description="已经有zip包和备份数据，然后跟新ADXP-Agent">
	</target>

	<target name="deploy4-replace-ADXP-Agent" depends="getprozip,unZip-ADXP-Agent,getADXP-Agent,replace-agent-conf" description="从构建环境中下载zip包，有备份数据，然后更新部署ADXP-Agent">
	</target>
</project>